import javax.swing.*;<br>import java.awt.*;<br>import java.awt.event.*;<br>import java.lang.Math;<br><br>class Beehive extends JFrame {<br><br>    private static int min = 10;<br>    private static int max = 50;<br><br>    public static void main (String[] args) {<br>        try {<br>            if (args.length<1 || Integer.parseInt(args[0])<min || Integer.parseInt(args[0])>max) {<br>                System.out.println("Usage: java Beehive <integer width between "+min+" and "+max+">");<br>                return;<br>            } else {<br><br>                System.setProperty("sun.java2d.opengl", "true");<br><br>                JFrame frame = new JFrame();<br><br>                frame.setTitle("Simulation");<br>                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>                frame.pack();<br>                frame.setSize(880,900);<br>                frame.setLocationRelativeTo(null);<br><br>                GridPanel panel = new GridPanel(Integer.parseInt(args[0]));<br>                frame.add(panel);<br>                <br>                frame.setVisible(true);<br>                frame.setResizable(false);<br><br>            }<br>        } catch (Exception e) {<br>            System.out.println("Usage: java Beehive <integer width between "+min+" and "+max+">");<br>            return;<br>        }<br>    }<br>}<br><br>class GridPanel extends JPanel {<br><br>    private int[][] rates;<br>    private int[][] counts;<br>    private int[][] speeds;<br>    private int max;<br>    private int min;<br>    private int r;<br>    private Timer t;<br>    private int w;<br><br>    public GridPanel (int wid) {<br><br>        max = 15;<br>        min = 10;<br>        r   = 30;<br>        w   = wid;<br>        <br><br>        rates  = new int[w][w];<br>        counts = new int[w][w];<br>        speeds = new int[w][w];<br><br>        for (int i=0; i<w; i++) {<br>            for (int j=0; j<w; j++){<br>                rates [i][j] = r; //(int) (Math.random() * (max - min + 1)) + min;<br>                counts[i][j] = (int) (Math.random() * (r+1)); //0;<br>                speeds[i][j] = (int) (Math.random() * (10)) + 1; // how fast does the cell reset its count?<br>            }<br>        }<br><br>        t = new Timer(3000/(w+20), new Step());<br>        t.start();<br>    }<br><br>    private int next(int a){<br>        //return (a+1) % rates.length;<br>        return Math.min(a+1, w-1);<br>    }<br>    private int prev(int a){<br>        //return (a+rates.length-1) % rates.length;<br>        return Math.max(a-1, 0);<br>    }<br>    private boolean checkBlink (int i, int j) {<br>        if (i<0 || j<0 || i>=w || j>=w) return false;<br>        return counts[i][j]==0;<br>    }<br>    <br><br>    private class Step implements ActionListener {<br><br>        @Override<br>        public void actionPerformed (ActionEvent a) {<br>            <br>            for (int i=0; i<w; i++) {<br>                for (int j=0; j<w; j++){<br>                    counts[i][j] = (counts[i][j]+1) % rates[i][j];<br>                }<br>            }<br><br>            repaint();<br><br>            for (int i=0; i<w; i++) {<br>                for (int j=0; j<w; j++){<br>                    //if it hasnt blinked recently and something else around it blinks, reset counts[i][j]<br>                    if (counts[i][j]>r/2 && (checkBlink(next(i),j) || checkBlink(prev(i),j) || checkBlink(i,next(j)) || checkBlink(i,prev(j)))) {<br>                        counts[i][j] = -1;<br>                        //counts[i][j] *=9;<br>                        //counts[i][j] /=10;<br>                        //counts[i][j] /= speeds[i][j];<br>                    }<br>                }<br>            }<br>        }<br>    }<br><br>    @Override<br>    public void paint(Graphics g) {<br>        super.paint(g);<br><br>        Graphics2D g2 = (Graphics2D)g;<br><br>        setBackground(new Color(0.3f,0.3f,0.3f));<br><br>        int cellWidth = 800/w;<br><br>        for (int i=0; i<w; i++) { // for each x<br>            for (int j=0; j<w; j++){ // for each y<br>                //blink if counts[i][j] == 0<br>                if (counts[i][j]==0 || counts[i][j]==1){<br>                    g2.setColor(Color.black);<br>                    g2.fillRect(4+cellWidth*i,4+cellWidth*j,cellWidth-4,cellWidth-4);<br>                    <br>                } else {<br>                    g2.setColor(new Color(0.7f,0.5f,0.0f));<br>                    g2.fillRect(4+cellWidth*i,4+cellWidth*j,cellWidth-4,cellWidth-4);<br>                }<br>            }<br>        }<br><br>    }<br>}